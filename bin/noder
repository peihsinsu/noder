#!/usr/bin/env node
var fs = require('fs')
  , http = require('http')
  , p = require('commander')
  , _ = require('underscore')
  , pkginfo = JSON.parse(fs.readFileSync(__dirname + '/../package.json'))
  , ver = pkginfo.version
  , logger = require('../lib/logger')
  , log = logger.logger;

log.setLevel(process.env['LOG_LEVEL']||'INFO');

log.info('Noder version: %s', ver);

p.version(ver)
  .option('-i, --host address <ip>', 'Specific host, like 192.168.1.1, default is all ip listened')
  .option('-p, --port <port>', 'Specific port, like 80,3000,8080, default is 1337')
  .option('-a, --allow <allow file type>', 'Specific the allowed file types that seprate by ",", default is all', list)
  .option('-d, --deny <deny file type>', 'Specific the denied file types that seprate by ",", default is none', list)
  .parse(process.argv);

function list(val) {
  return val.split(',');
}

var port = p.port || 1337
  , host = p.host || '127.0.0.1'
  , allow = p.allow || ''
  , deny = p.deny || '';

if(allow)
  log.trace('Got allowed setting:%s', allow);
if(deny)
  log.trace('Got denied setting:%s', deny);

var server = http.createServer(function (req, res) {
  var path = req.url;
    path = path.split('?')[0];
  log.trace('Got request path: %s', path);
  //Reformat file location
  if (path.trim() == '/') {
    path = '/index.html';
    log.trace('Reformat path from "/" to %s', path);
    res.writeHead(302, { 'Location': '/index.html' });
    res.end();
  }

  //Get content
  if(isAllowedFile(path)) {
    try{ 
      log.trace('Reading file from %s', '.' + path);
      var f = fs.readFileSync('.' + path);
      logger.record(req, res);
      res.end(f);
    } catch(e) {
      if(path.endsWith('.ico')) {
        log.trace('ico not found, use default...');
        var f = fs.readFileSync(__dirname + '/../noder.png');
        logger.record(req, res);
        res.end(f);
      } else { 
        logger.record(req, res);
        res.statusCode = 404;
        log.error(e);
        res.end('<h1>404 Page Not Found</h1>');
      }
    }
  } else {
    logger.record(req, res);
    res.statusCode = 301;
    res.end('NOT-ALLOWED-FORMAT');
  }
});

function isAllowedFile(path){
  if(path.indexOf('/..') == 0){
    log.error('Cannot cross folder query...');
    return false;
  }
  var arr = path.split('.');
  var fileType = arr[arr.length-1];
  log.trace('Got fileType:%s', fileType);
  if( allow ){
    if( _.indexOf(allow, fileType) >=0 ) {
      log.trace('By pass by allow rule.');
      return true;
    } else {
      return false;
    }
  }  

  if( deny ) {
    if(  _.indexOf(deny, fileType) >=0 ) {
      log.trace('Filtered by deny rule.');
      return false;
    } else {
      return true;
    }
  }  
  
  return true;
}

if(host)
  server.listen(port, host);
else
  server.listen(port);

log.info('Server running at http://%s:%s/', host, port);

String.prototype.endsWith = function (s) {
  return this.length >= s.length && this.substr(this.length - s.length) == s;
}
